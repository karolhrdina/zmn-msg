<class
    name = "zmn_proto"
    signature = "1"
    title = "Basic messaging for zmon.it"
    script = "zproto_codec_c"
    package_dir = "../include"
    source_dir = "."
    export_header = "zmproto.h"
    >

<include filename = "../license.xml" />

<!-- each message can be extended, put things to hash -->
<header>
    <field name = "time" type = "number" size = "8">
        Time when message was generated
    </field>
    <field name = "ttl" type = "number" size = "4">
        Time to live, after $current time > time - ttl, message is droped
    </field>
    <field name = "ext" type = "hash" >
        Additional extended informations for the message
    </field>
    <field name = "device" type = "uuid">
        Device universal unique identifier
    </field>

</header>

<message
    name = "METRIC"
    id = "1"
    >

    <!-- THA: IMO message should contain all necessary information, even if it is in topic too -->
    <!-- KHR: Agreed. -->
    <field name = "type" type = "string">
        Metric name, e.g.: "temperature", "humidity", "power.load", ...
    </field>

    <!-- MVY: consideration - for the faster processing, should not we have more messages?
         string-metric
         int-metric
         float-metric

         KHR: IMHO this is not a good idea.
              String is universal serialization format. (quoting Hintjens)
              Besides, how many more type systems would you like to invent? ;)
    -->
    <field name = "value" type = "string">
        Metric value, e.g.: "25.323" or "900".
    </field>

    <!-- MVY: dropped, this is why ext is for.
         THA: yes, let's drop this
         KHR: I disagree.
              If we had field 'type' containing information like temperature_C or temperature_K etc... then ok, 
              but we don't and therefore unit is integral part of the message.
              Moving this to ext only replaces fnction `zm_proto_unit` with `zm_proto_ext_string`
              On top of that we need to deal with unit prefixes defined by SI (k, M, ....) and therefore filling this should be mandatory.
    -->
    <field name = "unit" type = "string">
        Metric unit, e.g.: "C" or "F" for temperature, "W" or "kW" for realpower etc... 
    </field>
</message>

<message
    name = "ALERT"
    id = "2"
    >

    <!-- MVY: dropped as this is in message subject
         THA: the same as for metric, should be in message
              but maybe we can use the same naming type@device
              load@server.cz (is too high)
         KHR: I am also for keeping this (for several reasons, one of them already listed by THA).
              Prepared to argue on demand  :). 
    -->
    <field name = "rule" type = "string">
        Identifier of the rule which triggers this alert.
    </field>

    <!-- MVY: state exists only in alert-list component, normally you generate alert or not -->
    <!-- THA: alert with RESOLVED state is generated to inform imediatelly that broblem is gone -->
    <!-- KHR: You are both right. 
              This field is IMHO boolean - Active/Resolved. 

              Alternative would be to have a separate resolve alert message.

              Also i totally agree with completely dropping the various ACK states.
    --> 
    <field name = "state" type = "number" size = "1">
        Alert is active (value 1) or resolved (value 0).
    </field>

    <!-- KHR: this is IMHO boolean - critical or not... -->
    <field name = "severity" type = "number" size = "1">
        Alert is critical (value 1) or not (value 0).
    </field>

    <field name = "description" type = "string">
        Alert description.
    </field>
</message>

<message
    name = "DEVICE"
    id = "3">

    <!-- MVY: how about uuid??
         THA: Not sure about uuid
         KHR: Let's try it :)
    -->
    <!-- KHR: Also, i renamed 'id' to 'device' and thus was able to moved the field to header -->

</message>

</class>
